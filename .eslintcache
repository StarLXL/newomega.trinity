[{"/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/index.tsx":"1","/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/App.tsx":"2","/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/OmegaApp.js":"3","/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/scenes/CommanderSelection.js":"4","/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/definitions/Ships.js":"5","/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/scenes/ShipSelection.js":"6","/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/scenes/Combat.js":"7","/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/definitions/Commanders.js":"8","/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/common/OmegaLoadingScreen.js":"9","/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/ui/Settings.js":"10","/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/ui/LoginScreen.js":"11","/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/ui/OpponentSelection.js":"12","/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/ui/ShowLogs.js":"13","/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/ui/Leaderboard.js":"14","/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/common/FastProvider.js":"15"},{"size":508,"mtime":1612298233527,"results":"16","hashOfConfig":"17"},{"size":1713,"mtime":1612559592384,"results":"18","hashOfConfig":"17"},{"size":19043,"mtime":1612560708469,"results":"19","hashOfConfig":"17"},{"size":8390,"mtime":1612571072866,"results":"20","hashOfConfig":"17"},{"size":2830,"mtime":1612579300300,"results":"21","hashOfConfig":"17"},{"size":11078,"mtime":1612577944843,"results":"22","hashOfConfig":"17"},{"size":13672,"mtime":1612582439450,"results":"23","hashOfConfig":"17"},{"size":1714,"mtime":1612571092062,"results":"24","hashOfConfig":"17"},{"size":634,"mtime":1612477932413,"results":"25","hashOfConfig":"17"},{"size":2884,"mtime":1612555884022,"results":"26","hashOfConfig":"17"},{"size":3038,"mtime":1612555475659,"results":"27","hashOfConfig":"17"},{"size":1131,"mtime":1612531141830,"results":"28","hashOfConfig":"17"},{"size":1452,"mtime":1612531117519,"results":"29","hashOfConfig":"17"},{"size":1265,"mtime":1612531406471,"results":"30","hashOfConfig":"17"},{"size":251,"mtime":1612517587907,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"17me4sn",{"filePath":"36","messages":"37","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/index.tsx",["69"],"import * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nSentry.init({\n  dsn: \"https://adf39eeb31a04f4c9e2ae1613a647396@o509705.ingest.sentry.io/5604612\",\n  debug: true,\n  autoSessionTracking: true,\n\n  // We recommend adjusting this value in production, or using tracesSampler\n  // for finer control\n  tracesSampleRate: 1.0,\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n",["70","71","72"],"/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/App.tsx",["73","74","75","76","77","78","79","80","81"],"import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport {\n  IonApp,\n  IonIcon,\n  IonLabel,\n  IonRouterOutlet,\n  IonTabBar,\n  IonTabButton,\n  IonTabs,\n  setupConfig\n} from '@ionic/react';\nimport { IonReactRouter } from '@ionic/react-router';\nimport { apps, flash, send } from 'ionicons/icons';\nimport OmegaApp from './OmegaApp';\n\n/* Core CSS required for Ionic components to work properly */\nimport '@ionic/react/css/core.css';\n\n/* Basic CSS for apps built with Ionic */\nimport '@ionic/react/css/normalize.css';\nimport '@ionic/react/css/structure.css';\nimport '@ionic/react/css/typography.css';\n\n/* Optional CSS utils that can be commented out */\nimport '@ionic/react/css/padding.css';\nimport '@ionic/react/css/float-elements.css';\nimport '@ionic/react/css/text-alignment.css';\nimport '@ionic/react/css/text-transformation.css';\nimport '@ionic/react/css/flex-utils.css';\nimport '@ionic/react/css/display.css';\n\n/* Theme variables */\nimport './theme/variables.css';\n\ndeclare let appManager: AppManagerPlugin.AppManager;\ndeclare let titleBarManager: TitleBarPlugin.TitleBarManager;\n\nsetupConfig({\n  swipeBackEnabled: false,\n  hardwareBackButton: false,\n});\n\nconst App: React.FC = () => {\n  document.addEventListener('deviceready', () => {\n    titleBarManager.setVisibility(\n      1, // HIDDEN\n      1); // HIDDEN\n    appManager.setVisible('show');\n    window.screen.orientation.lock('landscape');\n\n    document.addEventListener('backbutton', () => {\n    }, false);\n  }, false);\n\n  return <IonApp>\n    <IonReactRouter>\n      <IonRouterOutlet>\n        <Route path=\"/\" component={OmegaApp} exact={true} />\n      </IonRouterOutlet>\n    </IonReactRouter>\n  </IonApp>\n};\n\nexport default App;\n","/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/OmegaApp.js",["82"],"import './App.css';\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport * as TrinitySDK from \"@elastosfoundation/trinity-dapp-sdk\";\nimport { ShipSelection } from './scenes/ShipSelection';\nimport { CommanderSelection } from './scenes/CommanderSelection';\nimport { Combat } from './scenes/Combat';\nimport { OpponentSelection } from './ui/OpponentSelection';\nimport { Leaderboard } from './ui/Leaderboard';\nimport { LoginScreen } from './ui/LoginScreen';\nimport { ShowLogs } from './ui/ShowLogs';\nimport { Settings } from './ui/Settings';\nimport { Ships } from './definitions/Ships';\nimport { FastProvider } from './common/FastProvider';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport _ from 'underscore';\n\n\n\nconst Modes = {\n    PlayingVideo: 0,\n    LoginScreen: 1,\n    MainScreen: 2,\n    ShipSelection: 3,\n    CommanderSelection: 4,\n    CommanderPreview: 5,\n    Combat: 6,\n    OpponentSelection: 7,\n    ShowLogs: 8,\n    Leaderboard: 9,\n    Settings: 10,\n};\n\nconst TRAINING_SELECTION = [25, 18, 16, 6];\nconst DEFAULT_PROVIDER = 'ropsten';\nconst INFURA_KEY = 'dbb5964e1c98437389d0c43ee39db58a';\n\n\nexport default class OmegaApp extends Component {\n    constructor(props) {\n        super(props);\n\n        this.defaultLoadedState = {\n            mode: Modes.MainScreen,\n            loading: false,\n            trainingSelfSelection: null,\n            trainingResult: null,\n            trainingSelfCommander: null,\n            trainingOpponent: null,\n            trainingOpponentSelection: null,\n            trainingOpponentCommander: null,\n            trainingCp: null,\n            defenders: null,\n            settingDefence: false,\n            settingAttack: false,\n        };\n\n        this.defaultUnloadedState = {\n            mode: Modes.PlayingVideo,\n            ownAccount: null,\n            ethBalance: 0,\n            blockNumber: 0,\n            newOmegaContract: null,\n            hasUnseenFights: false,\n            playerName: window.localStorage.getItem('OmegaPlayerName') || 'Anonymous',\n        };\n\n        this.state = {\n            ...this.defaultLoadedState,\n            ...this.defaultUnloadedState,\n        };\n    }\n\n    shipSelectionDone(selection) {\n        this.setState({\n            mode: Modes.CommanderSelection,\n            trainingSelfSelection: selection,\n        });\n    }\n\n    async commanderSelectionDone(commander) {\n        this.setState({\n            loading: true,\n        });\n\n        if (this.state.settingDefence) {\n            try {\n                const tx = await this.state.newOmegaContract.registerDefence(\n                    this.state.trainingSelfSelection,\n                    commander,\n                    ethers.utils.formatBytes32String(this.state.playerName)\n                );\n\n                await tx.wait();\n            } catch (error) {\n                debugger;\n            }\n        } else if (this.state.settingAttack) {\n            try {\n                const tx = await this.state.newOmegaContract.attack(\n                    this.state.trainingOpponent,\n                    this.state.trainingSelfSelection,\n                    commander\n                );\n\n                await tx.wait();\n            } catch (error) {\n                debugger;\n            }\n        } else {\n            const seed = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n            let result;\n\n            try {\n                result = await this.state.newOmegaContract.replay(\n                    seed,\n                    this.state.trainingSelfSelection,\n                    this.state.trainingOpponentSelection,\n                    commander,\n                    this.state.trainingOpponentCommander\n                );\n            } catch (error) {\n                return this.setState(this.defaultLoadedState);\n            }\n\n            return this.setState({\n                mode: Modes.Combat,\n                trainingSelfCommander: commander,\n                trainingResult: result,\n            });\n        }\n\n        this.setState(this.defaultLoadedState);\n    }\n\n    commanderPreviewDone() {\n        this.setState(this.defaultLoadedState);\n    }\n\n    opponentSelectionDone(opponent) {\n        const trainingOpponentSelection = opponent.defenceSelection;\n\n        this.setState({\n            mode: Modes.ShipSelection,\n            settingAttack: true,\n            trainingOpponent: opponent.player,\n            trainingOpponentSelection,\n            trainingOpponentCommander: opponent.commander,\n            trainingCp: this._selectionToCp(trainingOpponentSelection),\n        });\n    }\n\n    _selectionToCp(selection) {\n        return _.reduce(selection, (memo, num, index) => {\n            return memo + (num || 0) * Ships[index].stats.cp;\n        }, 0);\n    }\n\n    handlePlayerNameChange(e) {\n        window.localStorage.setItem('OmegaPlayerName', e.target.value);\n        this.setState({\n            playerName: e.target.value,\n        });\n    }\n\n    training() {\n        const trainingOpponentSelection = TRAINING_SELECTION;\n\n        this.setState({\n            mode: Modes.ShipSelection,\n            trainingOpponentSelection,\n            trainingOpponentCommander: 0,\n            trainingCp: this._selectionToCp(trainingOpponentSelection),\n        });\n    }\n\n    commanders() {\n        this.setState({\n            mode: Modes.CommanderPreview,\n        });\n    }\n\n    async defend() {\n        this.setState({\n            loading: true,\n        });\n\n        let myDefence;\n\n        try{\n            myDefence = await this.state.newOmegaContract.getOwnDefence();\n        } catch (error) {\n        }\n\n        const trainingOpponentSelection = myDefence && myDefence.isInitialised\n            ? myDefence.defenceSelection\n            : TRAINING_SELECTION;\n\n        this.setState({\n            mode: Modes.ShipSelection,\n            settingDefence: true,\n            trainingOpponentSelection,\n            trainingCp: this._selectionToCp(trainingOpponentSelection),\n            loading: false,\n        });\n    }\n\n    attachBlockchainEvents(provider, newOmegaContract, ownAccount) {\n        const filter = newOmegaContract.filters.FightComplete();\n        filter.attacker = ownAccount;\n\n        provider.on(filter, () => {\n            this.setState({\n                hasUnseenFights: true,\n            });\n        });\n\n        provider.on('block', (blockNumber) => {\n            this._checkBalance(provider, ownAccount);\n            this.setState({\n                blockNumber,\n            });\n        });\n    }\n\n    async showLogs() {\n        const filterAttacker = this.state.newOmegaContract.filters.FightComplete();\n        filterAttacker.fromBlock = this.state.provider.getBlockNumber().then((b) => b - 100000);\n        filterAttacker.toBlock = 'latest';\n        filterAttacker.attacker = this.state.ownAccount;\n\n        const filterDefender = this.state.newOmegaContract.filters.FightComplete();\n        filterAttacker.fromBlock = this.state.provider.getBlockNumber().then((b) => b - 100000);\n        filterAttacker.toBlock = 'latest';\n        filterAttacker.defender = this.state.ownAccount;\n\n        this.setState({\n            loading: true,\n        });\n\n        let logsAttacker, logsDefender;\n\n        try {\n            logsAttacker = await this.state.provider.getLogs(filterAttacker);\n            logsDefender = await this.state.provider.getLogs(filterDefender);\n        } catch (error) {\n            return this.setState(this.defaultLoadedState);\n        }\n\n        const logs = logsAttacker.concat(logsDefender);\n        const logsParsed = _.map(logs, (log) => {\n            return this.state.newOmegaContract.interface.parseLog(log);\n        });\n\n        let defenders;\n\n        try {\n            defenders = await this.state.newOmegaContract.getAllDefenders();\n        } catch (error) {\n            return this.setState(this.defaultLoadedState);\n        }\n\n        this.setState({\n            mode: Modes.ShowLogs,\n            logs: logsParsed,\n            loading: false,\n            hasUnseenFights: false,\n            defenders,\n        });\n    }\n\n    async logSelectionDone(log) {\n        const metaResult = log.args[2];\n\n        this.setState({\n            loading: true,\n        });\n\n        let result;\n\n        try {\n            result = await this.state.newOmegaContract.replay(\n                metaResult.seed,\n                metaResult.selectionLhs,\n                metaResult.selectionRhs,\n                metaResult.commanderLhs,\n                metaResult.commanderRhs);\n        } catch (error) {\n            return this.setState(this.defaultLoadedState);\n        }\n\n        const _parseHp = (hp) => {\n            return _.map(hp, (hpInst) => {\n                return hpInst.toNumber();\n            });\n        }\n\n        const resultJson = {\n            lhs: result.lhs,\n            rhs: result.rhs,\n            lhsHp: _parseHp(result.lhsHp),\n            rhsHp: _parseHp(result.rhsHp),\n            rounds: result.rounds,\n            selectionLhs: result.selectionLhs,\n            selectionRhs: result.selectionRhs,\n            commanderLhs: result.commanderLhs,\n            commanderRhs: result.commanderRhs,\n            lhsDead: result.lhsDead,\n            rhsDead: result.rhsDead,\n        };\n\n        this.setState({\n            mode: Modes.Combat,\n            trainingSelfSelection: resultJson.selectionLhs,\n            trainingSelfCommander: resultJson.commanderLhs,\n            trainingOpponentSelection: resultJson.selectionRhs,\n            trainingResult: resultJson,\n            loading: false,\n        });\n    }\n\n    async attack() {\n        this.setState({\n            loading: true,\n        });\n\n        let defenders;\n\n        try {\n            defenders = await this.state.newOmegaContract.getAllDefenders();\n        } catch (error) {\n            return this.setState(this.defaultLoadedState);\n        }\n\n        this.setState({\n            mode: Modes.OpponentSelection,\n            defenders,\n            loading: false,\n        });\n    }\n\n    async leaderboard() {\n        this.setState({\n            loading: true,\n        });\n\n        let leaderboard;\n\n        try {\n            leaderboard = await this.state.newOmegaContract.getLeaderboard();\n        } catch (error) {\n            return this.setState(this.defaultLoadedState);\n        }\n\n        this.setState({\n            mode: Modes.Leaderboard,\n            leaderboard,\n            loading: false,\n        });\n    }\n\n    onLoginDone(options) {\n        this.setState({\n            loading: true,\n        }, () => {\n            _.defer(() => {\n                const provider = new FastProvider(DEFAULT_PROVIDER, INFURA_KEY);\n                const signer = options.finisher().connect(provider);\n                this._initWeb3(provider, signer);\n            });\n        });\n    }\n\n    showSettings() {\n        this.setState({\n            mode: Modes.Settings,\n        });\n    }\n\n    genericCancelHandler() {\n        this.setState(this.defaultLoadedState);\n    }\n\n    introVideoComplete() {\n        this.setState({\n            mode: Modes.LoginScreen,\n        });\n    }\n\n    render() {\n        const logsClassName = `mainMenuItem ${this.state.hasUnseenFights ? 'unread' : ''}`;\n        const ethBalanceString = this._formatBalance(ethers.utils.formatEther(this.state.ethBalance));\n\n        return (\n            <div className=\"App\">\n                {this.state.mode === Modes.LoginScreen &&\n                    <LoginScreen onDone={this.onLoginDone.bind(this)}/>\n                }\n                {this.state.mode === Modes.MainScreen &&\n                    <div className=\"mainScreen ui\">\n                        <div className=\"mainTitle\">\n                        </div>\n                        <div className=\"playerName\">\n                            <input autoCorrect=\"off\" type=\"text\" className=\"playerNameInput\" value={this.state.playerName}\n                                onChange={this.handlePlayerNameChange.bind(this)}/>\n                        </div>\n                        <div className=\"settings\" onClick={this.showSettings.bind(this)}>\n                            <SettingsIcon fontSize=\"large\"/>\n                        </div>\n                        <div className=\"mainMenu\">\n                            <div className=\"mainMenuItem\" onClick={this.training.bind(this)}>\n                                TRAINING\n                            </div>\n                            <div className=\"mainMenuItem\" onClick={this.commanders.bind(this)}>\n                                ACADEMY\n                            </div>\n                            <div className={logsClassName} onClick={this.showLogs.bind(this)}>\n                                LOGS\n                            </div>\n                            <div className=\"mainMenuItem\" onClick={this.defend.bind(this)}>\n                                DEFENCE\n                            </div>\n                            <div className=\"mainMenuItem\" onClick={this.attack.bind(this)}>\n                                ATTACK\n                            </div>\n                            <div className=\"mainMenuItem\" onClick={this.leaderboard.bind(this)}>\n                                RANKING\n                            </div>\n                        </div>\n                        <div className=\"versionBox uiElement bottomElement\">\n                            Version: 0.0.1 (c) celrisen.eth\n                        </div>\n                        <div className=\"ethBalance uiElement bottomElement\">\n                            Ξ{ethBalanceString} Block: {this.state.blockNumber}\n                        </div>\n                    </div>\n                }\n                {this.state.mode === Modes.Settings &&\n                    <Settings onDone={() => { this.setState(this.defaultLoadedState) }}\n                        address={this.state.ownAccount} balance={ethBalanceString}\n                        mnemonic={this.state.signer && this.state.signer.mnemonic.phrase}\n                        onCancel={this.genericCancelHandler.bind(this)}/>\n                }\n                {this.state.mode === Modes.ShipSelection &&\n                    <ShipSelection maxCp={this.state.trainingCp}\n                        defaultShips={this.state.trainingOpponentSelection}\n                        onDone={this.shipSelectionDone.bind(this)}\n                        onCancel={this.genericCancelHandler.bind(this)}/>\n                }\n                {this.state.mode === Modes.CommanderSelection &&\n                    <CommanderSelection onDone={this.commanderSelectionDone.bind(this)}\n                        onCancel={this.genericCancelHandler.bind(this)}/>\n                }\n                {this.state.mode === Modes.CommanderPreview &&\n                    <CommanderSelection onDone={this.commanderPreviewDone.bind(this)}\n                        onCancel={this.genericCancelHandler.bind(this)}/>\n                }\n                {this.state.mode === Modes.Combat &&\n                    <Combat selectionLhs={this.state.trainingSelfSelection}\n                        selectionRhs={this.state.trainingOpponentSelection}\n                        commanderLhs={this.state.trainingSelfCommander}\n                        commanderRhs={0}\n                        result={this.state.trainingResult}\n                        onCancel={this.genericCancelHandler.bind(this)}\n                    />\n                }\n                {this.state.mode === Modes.OpponentSelection &&\n                    <OpponentSelection opponents={this.state.defenders}\n                        onDone={this.opponentSelectionDone.bind(this)}\n                        onCancel={this.genericCancelHandler.bind(this)}\n                    />\n                }\n                {this.state.mode === Modes.ShowLogs &&\n                    <ShowLogs logs={this.state.logs}\n                        opponents={this.state.defenders}\n                        onDone={this.logSelectionDone.bind(this)}\n                        onCancel={this.genericCancelHandler.bind(this)}/>\n                }\n                {this.state.mode === Modes.Leaderboard &&\n                    <Leaderboard leaderboard={this.state.leaderboard}\n                        onCancel={this.genericCancelHandler.bind(this)}/>\n                }\n                <div\n                    id=\"omegaLoadingScreen\"\n                    style={!this.state.loading ? {display: 'none'} : {}}>\n                    <div className=\"logo\"/>\n                    <div className=\"progressOuter progress-line\"/>\n                    <div className=\"status\">\n                        <span className=\"blockchain\">\n                            Waiting for blockchain...\n                        </span>\n                        <span className=\"assets\">\n                            Loading assets...\n                        </span>\n                    </div>\n                </div>\n                {this.state.mode === Modes.PlayingVideo &&\n                    <div className=\"introVideo\">\n                        <video width=\"100%\"\n                            height=\"100%\"\n                            autoPlay={true}\n                            muted={true}\n                            onEnded={this.introVideoComplete.bind(this)}\n                            poster=\"noposter\">\n                            <source src=\"assets/videos/intro.mp4\" type=\"video/mp4\"/>\n                        </video>\n                    </div>\n                }\n            </div>\n        );\n    }\n\n    _formatBalance(balance) {\n        return parseFloat(balance, 10).toFixed(4).toString();\n    }\n\n    async _initWeb3(provider, signer) {\n        // const provider = new TrinitySDK.Ethereum.Web3.Providers.TrinityWeb3Provider();\n        provider = provider || new FastProvider(window.ethereum);\n        signer = signer || provider.getSigner();\n\n        this.setState({\n            loading: true,\n        });\n\n        let ownAccount;\n        if (!provider) {\n            const accounts = await window.ethereum.send('eth_requestAccounts');\n            ownAccount = accounts.result[0];\n        } else {\n            ownAccount = signer.address;\n        }\n\n        await this._checkBalance(provider, ownAccount);\n        this.setState({\n            provider,\n            ownAccount,\n            signer,\n        }, () => {\n            this._loadContracts(provider, signer, ownAccount);\n        });\n    }\n\n    async _checkBalance(provider, ownAccount) {\n        const ethBalance = await provider.getBalance(ownAccount);\n        this.setState({\n            ethBalance,\n        });\n    }\n\n    _loadContracts(provider, signer, ownAccount) {\n        const newOmegaJson = require('./abi/NewOmega.json');\n        const newOmegaAddress = '0x74691ecA89eb9b842932ddEB9111c3CE21F9D6Be';\n        const newOmegaContract = new ethers.Contract(newOmegaAddress, newOmegaJson, signer);\n\n        this.attachBlockchainEvents(provider, newOmegaContract, ownAccount);\n        this.setState({\n            newOmegaContract,\n            mode: Modes.MainScreen,\n            loading: false,\n        });\n    }\n}\n\n",["83","84","85"],"/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/scenes/CommanderSelection.js",[],"/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/definitions/Ships.js",["86"],"import { Color3, Vector3 } from '@babylonjs/core';\n\nexport const Ships = [\n    {\n        name: 'Hunter',\n        asset: 'assets/drone_v9_cybertech/',\n        description: 'Cheap, quick and agile, the Hunter can be used as a quick strike weapon, able to reach enemy lines quickest. Can not withstand much heat though.',\n        stats: {\n            cp: 1,\n            hp: 1000,\n            attack: {\n                base: 30,\n                variable: 5,\n            },\n            defence: 2,\n            speed: 6,\n            range: 6,\n            agility: 25,\n        },\n        scale: 1000,\n        combatScale: 0.6,\n        visuals: {\n            beamColor: new Color3(0, 1, 0),\n            beamWidth: Math.PI / 256,\n        },\n    },\n    {\n        name: 'Scorpio',\n        asset: 'assets/drone_v2/',\n        description: 'As lightest of the heavier ships, the Scorpio retains some of the speed and maneuverability of the frigate while offering big improvements in the hull and weaponry.',\n        stats: {\n            cp: 4,\n            hp: 4000,\n            attack: {\n                base: 100,\n                variable: 20,\n            },\n            defence: 12,\n            speed: 4,\n            range: 8,\n            agility: 15,\n        },\n        scale: 1400,\n        combatScale: 0.6,\n        visuals: {\n            beamColor: new Color3(0.2, 0.2, 1),\n            beamWidth: Math.PI / 96,\n            rotationModifierY: -1,\n        },\n    },\n    {\n        name: 'Zeneca',\n        asset: 'assets/zeneca_brute/',\n        description: 'The Zeneca is an effective killing machine, providing both active support and serving as an artillery line raining heavy damage on enemy ships.',\n        stats: {\n            cp: 5,\n            hp: 5000,\n            attack: {\n                base: 130,\n                variable: 10,\n            },\n            defence: 15,\n            speed: 3,\n            range: 10,\n            agility: 10,\n        },\n        scale: 400,\n        combatScale: 0.8,\n        visuals: {\n            beamColor: new Color3(1, 1, 1),\n            beamWidth: Math.PI / 96,\n            rotationModifierY: 2,\n            rotationOddOffsetY: Math.PI,\n        },\n    },\n    {\n        name: 'Luminaris',\n        asset: 'assets/luminaris_starship/',\n        description: 'Fitted with state of the art weaponry and protection, the Luminaris is the ultimate fighting force in the galaxy.',\n        stats: {\n            cp: 15,\n            hp: 10000,\n            attack: {\n                base: 200,\n                variable: 5,\n            },\n            defence: 20,\n            speed: 2,\n            range: 12,\n            agility: 0,\n        },\n        scale: 120,\n        combatScale: 0.8,\n        visuals: {\n            beamColor: new Color3(1, 0, 1),\n            beamWidth: Math.PI / 64,\n        },\n    },\n];\n","/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/scenes/ShipSelection.js",[],"/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/scenes/Combat.js",[],"/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/definitions/Commanders.js",[],"/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/common/OmegaLoadingScreen.js",[],"/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/ui/Settings.js",["87","88"],"import './Settings.css';\nimport React, { useState } from 'react';\nimport _ from 'underscore';\nimport { ethers } from 'ethers';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\nimport QRCode from 'react-qr-code';\n\n\nconst Alert = (props) => {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst theme = createMuiTheme({\n    overrides: {\n        MuiButton: {\n            text: {\n                background: '#73ffbe',\n            },\n        },\n    },\n});\n\n// props.onDone, props.address, props.balance, props.mnemonic\nexport const Settings = (props) => {\n    const [toastOpen, setToastOpen] = useState(false);\n\n    const onTopup = () => {\n        window.open(`https://faucet.dimensions.network/`, '_blank');\n        props.onDone();\n    }\n\n    const copyAddressToClipboard = () => {\n        navigator.clipboard.writeText(props.address).then(() => {\n            setToastOpen(true);\n        });\n    }\n\n    const onToastClose = () => {\n        setToastOpen(false);\n    }\n\n    const qrCodeValue = `ethereum:${props.address}`;\n\n    return (\n        <div className=\"Settings\">\n            <div className=\"ui\">\n                <div className=\"mainTitle\">\n                </div>\n                <div className=\"mainMenu\">\n                    <div className=\"qr\">\n                        <QRCode value={qrCodeValue} size={128}/>\n                    </div>\n                    <div className=\"info\" onClick={copyAddressToClipboard}>\n                        <div className=\"network\">\n                            Network: Ethereum Ropsten (Testnet)\n                        </div>\n                        <div className=\"address\">\n                            Address: <span className=\"guid\">{props.address}</span>\n                        </div>\n                        <div className=\"balance\">\n                            Balance: Ξ{props.balance}\n                        </div>\n                        <div className=\"mnemonic\">\n                            Mnemonic: <span className=\"mnemonic-content\">{props.mnemonic}</span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"uiElement cancelBox bottomBox\" onClick={props.onCancel}>\n                    BACK\n                </div>\n                <div className=\"uiElement doneBox bottomBox\" onClick={onTopup}>\n                    TOP UP\n                </div>\n            </div>\n            <ThemeProvider theme={theme}>\n                <Snackbar open={toastOpen} autoHideDuration={3000} onClose={onToastClose}>\n                    <Alert onClose={onToastClose} severity=\"success\">\n                        Address copied to clipboard.\n                    </Alert>\n                </Snackbar>\n            </ThemeProvider>\n        </div>\n    );\n};\n","/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/ui/LoginScreen.js",[],"/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/ui/OpponentSelection.js",[],"/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/ui/ShowLogs.js",[],"/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/ui/Leaderboard.js",[],"/Users/wiktor/projects/newomega-trinity/org.celrisen.newomega/src/common/FastProvider.js",[],{"ruleId":"89","severity":1,"message":"90","line":2,"column":10,"nodeType":"91","messageId":"92","endLine":2,"endColumn":22},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"89","severity":1,"message":"99","line":2,"column":10,"nodeType":"91","messageId":"92","endLine":2,"endColumn":18},{"ruleId":"89","severity":1,"message":"100","line":5,"column":3,"nodeType":"91","messageId":"92","endLine":5,"endColumn":10},{"ruleId":"89","severity":1,"message":"101","line":6,"column":3,"nodeType":"91","messageId":"92","endLine":6,"endColumn":11},{"ruleId":"89","severity":1,"message":"102","line":8,"column":3,"nodeType":"91","messageId":"92","endLine":8,"endColumn":12},{"ruleId":"89","severity":1,"message":"103","line":9,"column":3,"nodeType":"91","messageId":"92","endLine":9,"endColumn":15},{"ruleId":"89","severity":1,"message":"104","line":10,"column":3,"nodeType":"91","messageId":"92","endLine":10,"endColumn":10},{"ruleId":"89","severity":1,"message":"105","line":14,"column":10,"nodeType":"91","messageId":"92","endLine":14,"endColumn":14},{"ruleId":"89","severity":1,"message":"106","line":14,"column":16,"nodeType":"91","messageId":"92","endLine":14,"endColumn":21},{"ruleId":"89","severity":1,"message":"107","line":14,"column":23,"nodeType":"91","messageId":"92","endLine":14,"endColumn":27},{"ruleId":"108","severity":1,"message":"109","line":4,"column":13,"nodeType":"91","messageId":"92","endLine":4,"endColumn":23},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"110"},{"ruleId":"108","severity":1,"message":"111","line":1,"column":18,"nodeType":"91","messageId":"92","endLine":1,"endColumn":25},{"ruleId":"108","severity":1,"message":"112","line":3,"column":8,"nodeType":"91","messageId":"92","endLine":3,"endColumn":9},{"ruleId":"108","severity":1,"message":"113","line":4,"column":10,"nodeType":"91","messageId":"92","endLine":4,"endColumn":16},"@typescript-eslint/no-unused-vars","'Integrations' is defined but never used.","Identifier","unusedVar","no-native-reassign",["114"],"no-negated-in-lhs",["115"],"jsx-a11y/accessible-emoji",[],"'Redirect' is defined but never used.","'IonIcon' is defined but never used.","'IonLabel' is defined but never used.","'IonTabBar' is defined but never used.","'IonTabButton' is defined but never used.","'IonTabs' is defined but never used.","'apps' is defined but never used.","'flash' is defined but never used.","'send' is defined but never used.","no-unused-vars","'TrinitySDK' is defined but never used.",[],"'Vector3' is defined but never used.","'_' is defined but never used.","'ethers' is defined but never used.","no-global-assign","no-unsafe-negation"]